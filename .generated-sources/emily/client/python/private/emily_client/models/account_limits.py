# coding: utf-8

"""
    emily-openapi-spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AccountLimits(BaseModel):
    """
    The representation of a limit for a specific account.
    """ # noqa: E501
    peg_cap: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Represents the current sBTC limits.", alias="pegCap")
    per_deposit_cap: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Per deposit cap. If none then the cap is the same as the global per deposit cap.", alias="perDepositCap")
    per_deposit_minimum: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Per deposit minimum. If none then there is no minimum.", alias="perDepositMinimum")
    per_withdrawal_cap: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Per withdrawal cap. If none then the cap is the same as the global per withdrawal cap.", alias="perWithdrawalCap")
    __properties: ClassVar[List[str]] = ["pegCap", "perDepositCap", "perDepositMinimum", "perWithdrawalCap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if peg_cap (nullable) is None
        # and model_fields_set contains the field
        if self.peg_cap is None and "peg_cap" in self.model_fields_set:
            _dict['pegCap'] = None

        # set to None if per_deposit_cap (nullable) is None
        # and model_fields_set contains the field
        if self.per_deposit_cap is None and "per_deposit_cap" in self.model_fields_set:
            _dict['perDepositCap'] = None

        # set to None if per_deposit_minimum (nullable) is None
        # and model_fields_set contains the field
        if self.per_deposit_minimum is None and "per_deposit_minimum" in self.model_fields_set:
            _dict['perDepositMinimum'] = None

        # set to None if per_withdrawal_cap (nullable) is None
        # and model_fields_set contains the field
        if self.per_withdrawal_cap is None and "per_withdrawal_cap" in self.model_fields_set:
            _dict['perWithdrawalCap'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pegCap": obj.get("pegCap"),
            "perDepositCap": obj.get("perDepositCap"),
            "perDepositMinimum": obj.get("perDepositMinimum"),
            "perWithdrawalCap": obj.get("perWithdrawalCap")
        })
        return _obj


