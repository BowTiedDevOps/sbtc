# coding: utf-8

"""
    emily-openapi-spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateDepositRequestBody(BaseModel):
    """
    Request structure for create deposit request.
    """ # noqa: E501
    bitcoin_tx_output_index: Annotated[int, Field(strict=True, ge=0)] = Field(description="Output index on the bitcoin transaction associated with this specific deposit.", alias="bitcoinTxOutputIndex")
    bitcoin_txid: StrictStr = Field(description="Bitcoin transaction id.", alias="bitcoinTxid")
    deposit_script: StrictStr = Field(description="Deposit script.", alias="depositScript")
    reclaim_script: StrictStr = Field(description="Reclaim script.", alias="reclaimScript")
    transaction_hex: StrictStr = Field(description="The raw transaction hex.", alias="transactionHex")
    __properties: ClassVar[List[str]] = ["bitcoinTxOutputIndex", "bitcoinTxid", "depositScript", "reclaimScript", "transactionHex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDepositRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDepositRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bitcoinTxOutputIndex": obj.get("bitcoinTxOutputIndex"),
            "bitcoinTxid": obj.get("bitcoinTxid"),
            "depositScript": obj.get("depositScript"),
            "reclaimScript": obj.get("reclaimScript"),
            "transactionHex": obj.get("transactionHex")
        })
        return _obj


