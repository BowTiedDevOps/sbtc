# coding: utf-8

"""
    emily-openapi-spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Fulfillment(BaseModel):
    """
    Data about the fulfillment of an sBTC Operation.
    """ # noqa: E501
    bitcoin_block_hash: StrictStr = Field(description="Bitcoin block hash of the block that contains the bitcoin transaction that fulfilled this transaction.", alias="BitcoinBlockHash")
    bitcoin_block_height: Annotated[int, Field(strict=True, ge=0)] = Field(description="Bitcoin block height of the block that contains the bitcoin transaction that fulfilled this transaction.", alias="BitcoinBlockHeight")
    bitcoin_tx_index: Annotated[int, Field(strict=True, ge=0)] = Field(description="Bitcoin transaction output index of the Bitcoin transaction that fulfilled the operation that corresponds to the fulfillment of this specific operation.", alias="BitcoinTxIndex")
    bitcoin_txid: StrictStr = Field(description="Bitcoin transaction id of the Bitcoin transaction that fulfilled the operation.", alias="BitcoinTxid")
    btc_fee: Annotated[int, Field(strict=True, ge=0)] = Field(description="Satoshis consumed to fulfill the sBTC operation.", alias="BtcFee")
    stacks_txid: StrictStr = Field(description="Stacks transaction Id that fulfilled this operation.", alias="StacksTxid")
    __properties: ClassVar[List[str]] = ["BitcoinBlockHash", "BitcoinBlockHeight", "BitcoinTxIndex", "BitcoinTxid", "BtcFee", "StacksTxid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Fulfillment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Fulfillment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BitcoinBlockHash": obj.get("BitcoinBlockHash"),
            "BitcoinBlockHeight": obj.get("BitcoinBlockHeight"),
            "BitcoinTxIndex": obj.get("BitcoinTxIndex"),
            "BitcoinTxid": obj.get("BitcoinTxid"),
            "BtcFee": obj.get("BtcFee"),
            "StacksTxid": obj.get("StacksTxid")
        })
        return _obj


