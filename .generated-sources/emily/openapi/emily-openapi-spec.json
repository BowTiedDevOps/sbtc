{
  "openapi": "3.0.3",
  "info": {
    "title": "emily-openapi-spec",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "paths": {
    "/chainstate": {
      "post": {
        "tags": [
          "chainstate"
        ],
        "summary": "Set chainstate handler.",
        "operationId": "setChainstate",
        "responses": {
          "201": {
            "description": "Chainstate updated successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      },
      "put": {
        "tags": [
          "chainstate"
        ],
        "summary": "Update chainstate handler.",
        "operationId": "updateChainstate",
        "responses": {
          "201": {
            "description": "Chainstate updated successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/chainstate/{height}": {
      "get": {
        "tags": [
          "chainstate"
        ],
        "summary": "Get chainstate handler.",
        "operationId": "getChainstate",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Height of the blockchain data to receive.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chainstate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/deposit": {
      "get": {
        "tags": [
          "deposit"
        ],
        "summary": "Get deposits handler.",
        "operationId": "getDeposits",
        "parameters": [
          {
            "name": "nextToken",
            "in": "query",
            "description": "the next token value from the previous return of this api call.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the maximum number of items in the response list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposits retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      },
      "post": {
        "tags": [
          "deposit"
        ],
        "summary": "Create deposit handler.",
        "operationId": "createDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deposit created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      },
      "put": {
        "tags": [
          "deposit"
        ],
        "summary": "Update deposits handler.",
        "operationId": "updateDeposits",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepositsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Deposits updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDepositsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/deposit/{txid}": {
      "get": {
        "tags": [
          "deposit"
        ],
        "summary": "Get deposits for transaction handler.",
        "operationId": "getDepositsForTransaction",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "txid associated with the Deposit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "the next token value from the previous return of this api call.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the maximum number of items in the response list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposits retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositsForTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/deposit/{txid}/{index}": {
      "get": {
        "tags": [
          "deposit"
        ],
        "summary": "Get deposit handler.",
        "operationId": "getDeposit",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "txid associated with the Deposit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "path",
            "description": "output index associated with the Deposit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Get health handler.",
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "Successfully retrieved health data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/withdrawal": {
      "get": {
        "tags": [
          "withdrawal"
        ],
        "summary": "Get withdrawals handler.",
        "operationId": "getWithdrawals",
        "responses": {
          "200": {
            "description": "Withdrawals retrieved successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      },
      "post": {
        "tags": [
          "withdrawal"
        ],
        "summary": "Create withdrawal handler.",
        "operationId": "createWithdrawal",
        "responses": {
          "201": {
            "description": "Withdrawals updated successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      },
      "put": {
        "tags": [
          "withdrawal"
        ],
        "summary": "Update withdrawals handler.",
        "operationId": "updateWithdrawals",
        "responses": {
          "201": {
            "description": "Withdrawals updated successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    },
    "/withdrawal/{id}": {
      "get": {
        "tags": [
          "withdrawal"
        ],
        "summary": "Get withdrawal handler.",
        "operationId": "getWithdrawal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id associated with the Withdrawal",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Withdrawal retrieved successfully",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Invalid request body"
          },
          "404": {
            "description": "Address not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "type": "aws_proxy",
          "uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OperationLambda}/invocations"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateDepositRequestBody": {
        "type": "object",
        "description": "Request structure for create deposit request.",
        "required": [
          "bitcoinTxid",
          "bitcoinTxOutputIndex",
          "reclaim",
          "deposit"
        ],
        "properties": {
          "bitcoinTxOutputIndex": {
            "$ref": "#/components/schemas/BitcoinTransactionOutputIndex"
          },
          "bitcoinTxid": {
            "$ref": "#/components/schemas/BitcoinTransactionId"
          },
          "deposit": {
            "$ref": "#/components/schemas/BitcoinScript"
          },
          "reclaim": {
            "$ref": "#/components/schemas/BitcoinScript"
          }
        }
      },
      "Deposit": {
        "type": "object",
        "description": "Deposit.",
        "required": [
          "bitcoinTxid",
          "bitcoinTxOutputIndex",
          "recipient",
          "amount",
          "lastUpdateHeight",
          "lastUpdateBlockHash",
          "status",
          "statusMessage",
          "parameters"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Satoshis"
          },
          "bitcoinTxOutputIndex": {
            "$ref": "#/components/schemas/BitcoinTransactionOutputIndex"
          },
          "bitcoinTxid": {
            "$ref": "#/components/schemas/BitcoinTransactionId"
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fulfillment"
              }
            ],
            "nullable": true
          },
          "lastUpdateBlockHash": {
            "$ref": "#/components/schemas/StacksBlockHash"
          },
          "lastUpdateHeight": {
            "$ref": "#/components/schemas/BlockHeight"
          },
          "parameters": {
            "$ref": "#/components/schemas/DepositParameters"
          },
          "recipient": {
            "$ref": "#/components/schemas/StacksPrinciple"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the deposit."
          }
        }
      },
      "DepositInfo": {
        "type": "object",
        "description": "Reduced version of the Deposit data.",
        "required": [
          "bitcoinTxid",
          "bitcoinTxOutputIndex",
          "recipient",
          "amount",
          "lastUpdateHeight",
          "lastUpdateBlockHash",
          "status"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Satoshis"
          },
          "bitcoinTxOutputIndex": {
            "$ref": "#/components/schemas/BitcoinTransactionOutputIndex"
          },
          "bitcoinTxid": {
            "$ref": "#/components/schemas/BitcoinTransactionId"
          },
          "lastUpdateBlockHash": {
            "$ref": "#/components/schemas/StacksBlockHash"
          },
          "lastUpdateHeight": {
            "$ref": "#/components/schemas/BlockHeight"
          },
          "recipient": {
            "$ref": "#/components/schemas/StacksPrinciple"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "DepositParameters": {
        "type": "object",
        "description": "Deposit parameters.",
        "required": [
          "maxFee",
          "lockTime",
          "reclaimScript"
        ],
        "properties": {
          "lockTime": {
            "$ref": "#/components/schemas/BlockHeight"
          },
          "maxFee": {
            "$ref": "#/components/schemas/Satoshis"
          },
          "reclaimScript": {
            "$ref": "#/components/schemas/BitcoinScript"
          }
        }
      },
      "DepositUpdate": {
        "type": "object",
        "description": "A Deposit where only the fields that need updating are set.",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Satoshis"
              }
            ],
            "nullable": true
          },
          "bitcoinTxOutputIndex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BitcoinTransactionOutputIndex"
              }
            ],
            "nullable": true
          },
          "bitcoinTxid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BitcoinTransactionId"
              }
            ],
            "nullable": true
          },
          "fulfillment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Fulfillment"
              }
            ],
            "nullable": true
          },
          "lastUpdateBlockHash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StacksBlockHash"
              }
            ],
            "nullable": true
          },
          "lastUpdateHeight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockHeight"
              }
            ],
            "nullable": true
          },
          "parameters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/super.DepositParameters"
              }
            ],
            "nullable": true
          },
          "recipient": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StacksPrinciple"
              }
            ],
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the deposit.",
            "nullable": true
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Structure representing an error response\nThis is used to serialize error messages in HTTP responses",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "GetDepositsForTransactionResponse": {
        "type": "object",
        "description": "Response to get deposits for transaction request.",
        "required": [
          "deposits"
        ],
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/super.Deposit"
            },
            "description": "Deposits."
          },
          "nextToken": {
            "type": "string",
            "description": "Next token for the search.",
            "nullable": true
          }
        }
      },
      "GetDepositsResponse": {
        "type": "object",
        "description": "Response to get deposits request.",
        "required": [
          "deposits"
        ],
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/super.DepositInfo"
            },
            "description": "Deposit infos: deposits with a little less data."
          },
          "nextToken": {
            "type": "string",
            "description": "Next token for the search.",
            "nullable": true
          }
        }
      },
      "HealthData": {
        "type": "object",
        "description": "Struct that represents the current status of the API.",
        "required": [
          "is_okay"
        ],
        "properties": {
          "is_okay": {
            "type": "boolean",
            "description": "Whether the API is okay."
          }
        }
      },
      "UpdateDepositsRequestBody": {
        "type": "object",
        "description": "Request structure for update deposit request.",
        "required": [
          "deposits"
        ],
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositUpdate"
            },
            "description": "Bitcoin transaction id."
          }
        }
      },
      "UpdateDepositsResponse": {
        "type": "object",
        "description": "Response to update deposits request.",
        "required": [
          "deposits"
        ],
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/super.Deposit"
            },
            "description": "Deposit infos: deposits with a little less data."
          }
        }
      }
    }
  }
}