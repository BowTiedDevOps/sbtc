name: Deploy Emily

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment name"
        required: true
        default: environment/sbtc-devnet
        type: choice
        options:
          - environment/sbtc-devnet
          - environment/sbtc-testnet
          - environment/sbtc-mainnet
          - environment/sbtc-staging
          - environment/sbtc-private-mainnet
  pull_request:
    branches:
      - main

concurrency:
  group: deploy-emily-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  EMILY_HANDLER_PATH: "emily/handler"
  EMILY_CDK_PATH: "emily/cdk"
  NODE_VERSION: 20

permissions:
  id-token: write
  contents: read
  issues: read
  pull-requests: read

jobs:
  resolve-env:
    name: Resolve Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      should_run: ${{ steps.set_env.outputs.should_run }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Resolve Environment
        id: set_env
        run: |
          ALLOWED_ENVS=("environment/sbtc-devnet" "environment/sbtc-testnet" "environment/sbtc-mainnet" "environment/sbtc-staging" "environment/sbtc-private-mainnet")
          SHOULD_RUN=true

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${GITHUB_REF_NAME}" != "main" ]; then
              echo "### The workflow_dispatch can only be run on main branch." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            ENVIRONMENT="${{ github.event.inputs.environment }}"

            VALID=false
            for env in "${ALLOWED_ENVS[@]}"; do
              if [ "$ENVIRONMENT" = "$env" ]; then
                VALID=true
                break
              fi
            done

            if [ "$VALID" != "true" ]; then
              echo "### Invalid workflow_dispatch environment: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
              echo "### Allowed environments: ${ALLOWED_ENVS[*]}" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            LABELS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels --jq '.[].name')

            MATCHED_ENVS=()
            for label in $LABELS; do
              for env in "${ALLOWED_ENVS[@]}"; do
                if [ "$label" = "$env" ]; then
                  MATCHED_ENVS+=("$label")
                fi
              done
            done

            if [ "${#MATCHED_ENVS[@]}" -eq 0 ]; then
              echo "### No valid environment label found on PR. Please add one of: ${ALLOWED_ENVS[*]}" >> $GITHUB_STEP_SUMMARY
              SHOULD_RUN=false
            elif [ "${#MATCHED_ENVS[@]}" -gt 1 ]; then
              echo "### Multiple environment labels found: ${MATCHED_ENVS[*]}. Please use only one." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi

            ENVIRONMENT="${MATCHED_ENVS[0]}"
          else
            echo "### Unsupported trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT

  diff:
    name: Build & Diff Emily
    runs-on: ubuntu-latest
    needs: resolve-env
    if: needs.resolve-env.outputs.should_run == 'true'
    environment: ${{ needs.resolve-env.outputs.environment }}
    env:
      AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
      AWS_DEPLOYMENT_PROFILE: ${{ vars.AWS_DEPLOYMENT_PROFILE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_STAGE: ${{ vars.AWS_STAGE }}
      CUSTOM_ROOT_DOMAIN_NAME: ${{ vars.CUSTOM_ROOT_DOMAIN_NAME }}
      DEPLOYER_ADDRESS: ${{ vars.DEPLOYER_ADDRESS }}
      HOSTED_ZONE_ID: ${{ vars.HOSTED_ZONE_ID }}
      NUM_SIGNER_API_KEYS: ${{ vars.NUM_SIGNER_API_KEYS }}
    steps:
      - name: Checkout Repository
        id: checkout_repository
        uses: stacks-sbtc/actions/checkout@a1754bb138bf66f595c6c42068fbc2e09a447e73

      - name: Configure AWS Credentials via OIDC
        id: configure_aws
        uses: stacks-sbtc/actions/aws/configure-aws-credentials@a1754bb138bf66f595c6c42068fbc2e09a447e73
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Rust
        id: setup_rust
        uses: stacks-sbtc/actions/setup-rust-toolchain@a1754bb138bf66f595c6c42068fbc2e09a447e73

      - name: Install Cargo Lambda
        id: install_cargo_lambda
        run: |
          cargo install cargo-lambda

      - name: Setup Node
        id: setup_node
        uses: stacks-sbtc/actions/setup-node@a1754bb138bf66f595c6c42068fbc2e09a447e73
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Zig
        id: install_zig
        run: |
          npm install -g @ziglang/cli

      - name: Build Emily
        id: build_emily
        working-directory: ${{ env.EMILY_HANDLER_PATH }}
        run: |
          echo "Building emily-lambda..."
          cargo lambda build \
            --locked \
            --bin emily-lambda \
            --release \
            --output-format zip \
            --x86-64
          echo "Done building emily lambda."

      - name: Install CDK Packages
        id: install_cdk_packages
        working-directory: ${{ env.EMILY_CDK_PATH }}
        run: |
          npm i

      - name: CDK Bootstrap & Diff
        id: cdk_bootstrap_diff
        working-directory: ${{ env.EMILY_CDK_PATH }}
        run: |
          echo "Ensuring that CDK is boostraped..."
          npx aws-cdk bootstrap
          echo "Done bootstrapping CDK."

          echo "Running CDK diff..."
          npx aws-cdk diff > cdk-diff-output.txt

          {
            echo "## CDK Diff Output"
            echo '```diff'
            sed -E '
            s/^(.*)\[\+\]/+ \1[+]/;
            s/^(.*)\[\-\]/- \1[-]/;
            /\[\+\]/!{/ \[\-\]/!s/^/  /}
            ' cdk-diff-output.txt
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy Emily
    runs-on: ubuntu-latest
    needs:
      - resolve-env
      - diff
    if: needs.resolve-env.outputs.should_run == 'true'
    environment: ${{ needs.resolve-env.outputs.environment }}
    env:
      AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
      AWS_DEPLOYMENT_PROFILE: ${{ vars.AWS_DEPLOYMENT_PROFILE }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_STAGE: ${{ vars.AWS_STAGE }}
      CUSTOM_ROOT_DOMAIN_NAME: ${{ vars.CUSTOM_ROOT_DOMAIN_NAME }}
      DEPLOYER_ADDRESS: ${{ vars.DEPLOYER_ADDRESS }}
      HOSTED_ZONE_ID: ${{ vars.HOSTED_ZONE_ID }}
      NUM_SIGNER_API_KEYS: ${{ vars.NUM_SIGNER_API_KEYS }}
    steps:
      - name: Checkout Repository
        id: checkout_repository
        uses: stacks-sbtc/actions/checkout@a1754bb138bf66f595c6c42068fbc2e09a447e73

      - name: Configure AWS Credentials via OIDC
        id: configure_aws
        uses: stacks-sbtc/actions/aws/configure-aws-credentials@a1754bb138bf66f595c6c42068fbc2e09a447e73
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Rust
        id: setup_rust
        uses: stacks-sbtc/actions/setup-rust-toolchain@a1754bb138bf66f595c6c42068fbc2e09a447e73

      - name: Install Cargo Lambda
        id: install_cargo_lambda
        run: |
          cargo install cargo-lambda

      - name: Setup Node
        id: setup_node
        uses: stacks-sbtc/actions/setup-node@a1754bb138bf66f595c6c42068fbc2e09a447e73
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Zig
        id: install_zig
        run: |
          npm install -g @ziglang/cli

      - name: Build Emily
        id: build_emily
        working-directory: ${{ env.EMILY_HANDLER_PATH }}
        run: |
          echo "Building emily-lambda..."
          cargo lambda build \
            --locked \
            --bin emily-lambda \
            --release \
            --output-format zip \
            --x86-64
          echo "Done building emily lambda."

      - name: Install CDK Packages
        id: install_cdk_packages
        working-directory: ${{ env.EMILY_CDK_PATH }}
        run: |
          npm i

      - name: Deploy Emily
        id: deploy_emily
        working-directory: ${{ env.EMILY_CDK_PATH }}
        run: |
          echo "Ensuring that CDK is boostraped..."
          npx aws-cdk bootstrap
          echo "Done bootstrapping CDK."

          echo "Deploying the stack..."
          npx aws-cdk deploy
          echo "Deployed Emily Successfully!" >> $GITHUB_STEP_SUMMARY
