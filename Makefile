# Convenience data so we can run the following and include
# sources from three directories deep.
#
# Example:
# $(subst dir, emily/cdk/lib, $(THREE_DIRS_DEEP))
# becomes
# emily/cdk/lib/*  emily/cdk/lib/*/*  emily/cdk/lib/*/*/*
ONE_DIR_DEEP    := dir/*
TWO_DIRS_DEEP   := dir/* $(subst dir, dir/*, $(ONE_DIR_DEEP))
THREE_DIRS_DEEP := dir/* $(subst dir, dir/*, $(TWO_DIRS_DEEP))
FOUR_DIRS_DEEP  := dir/* $(subst dir, dir/*, $(THREE_DIRS_DEEP))
FIVE_DIRS_DEEP  := dir/* $(subst dir, dir/*, $(FOUR_DIRS_DEEP))

# Common Folders.
AUTOGENERATED_SOURCES := ./.generated-sources

# Blocklist Client Files
AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT := $(AUTOGENERATED_SOURCES)/blocklist-api/src/lib.rs
BLOCKLIST_OPENAPI_PATH := $(AUTOGENERATED_SOURCES)/blocklist-openapi-gen
BLOCKLIST_OPENAPI_SPEC := $(BLOCKLIST_OPENAPI_PATH)/blocklist-client-openapi.json

# Emily API Files
EMILY_OPENAPI_PATH := $(AUTOGENERATED_SOURCES)/emily/openapi
EMILY_OPENAPI_SPEC := $(EMILY_OPENAPI_PATH)/emily-openapi-spec.json
AUTOGENERATED_EMILY_CLIENT := $(AUTOGENERATED_SOURCES)/emily/client/rust/src/lib.rs
EMILY_LAMBDA_BINARY := target/lambda/emily-handler/bootstrap.zip
EMILY_CDK_TEMPLATE := emily/cdk/cdk.out/EmilyStack.template.json
EMILY_DOCKER_COMPOSE := docker-compose.emily.yml

# File that's updated whenever there's a new pnpm installation.
INSTALL_TARGET := pnpm-lock.yaml

# Don't use the install target here so you can rerun install without
# Makefile complaints.
export DATABASE_URL=postgres://user:password@localhost:5432/signer

install:
	pnpm install

build:
	cargo build
	pnpm --recursive build

test:
	cargo test -- --test-threads=1
	pnpm --recursive test

lint:
	cargo clippy -- -D warnings
	pnpm --recursive run lint

format:
	cargo fmt

clean:
	cargo clean
	pnpm --recursive clean


.PHONY: install build test lint format clean

# Integration tests.
# ------------------------------------------------------------------------------

integration-env-up: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	docker compose --file docker/docker-compose.test.yml up --detach

integration-test: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	cargo test --test integration --all-features --no-fail-fast -- --test-threads=1

integration-env-down: $(INSTALL_TARGET) $(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT)
	docker compose --file docker-compose.test.yml down

integration-test-full: integration-env-down integration-env-up integration-test integration-env-down

.PHONY: integration-env-up integration-test integration-env-up integration-test-full

# Emily API
# ----------------------------------------------------

# Project Names
## Cargo crates
EMILY_HANDLER_PROJECT_NAME := emily-handler
EMILY_OPENAPI_SPEC_PROJECT_NAME := emily-openapi-spec
## Node projects
EMILY_CDK_PROJECT_NAME := emily-cdk

# Emily CDK Template ---------------------------------

EMILY_CDK_SOURCE_FILES := $(wildcard $(subst dir, emily/cdk/lib, $(FIVE_DIRS_DEEP)))
EMILY_CDK_SOURCE_FILES := $(wildcard $(subst dir, emily/bin/lib, $(FIVE_DIRS_DEEP))) $(EMILY_CDK_SOURCE_FILES)

$(EMILY_CDK_TEMPLATE): $(INSTALL_TARGET) $(EMILY_CDK_SOURCE_FILES)
	AWS_STAGE=local \
	TABLES_ONLY=true \
	pnpm --filter $(EMILY_CDK_PROJECT_NAME) run synth

# Emily Handler --------------------------------------

EMILY_HANDLER_SOURCE_FILES := $(wildcard $(subst dir, emily/handler, $(FIVE_DIRS_DEEP)))

# Build the OpenAPI specification.
$(EMILY_OPENAPI_SPEC): $(EMILY_HANDLER_SOURCE_FILES)
	cargo build --package $(EMILY_OPENAPI_SPEC_PROJECT_NAME)

# Build the zipped binary for the Emily Handler that AWS Lambda can deploy.
ifneq ($(filter arm64 aarch64, $(shell uname -m)),)
_LAMBDA_FLAGS := --arm64
endif
$(EMILY_LAMBDA_BINARY): $(EMILY_HANDLER_SOURCE_FILES)
	cargo lambda build \
		--release \
		--package $(EMILY_HANDLER_PROJECT_NAME) \
		--output-format zip \
		$(_LAMBDA_FLAGS)

# Emily Manual Task Triggers -------------------------

emily-lambda: $(EMILY_LAMBDA_BINARY)
emily-cdk-synth: $(EMILY_CDK_TEMPLATE)
emily-openapi-spec: $(EMILY_OPENAPI_SPEC)
emily-curl-test:
	./devenv/service-test/curl-test.sh localhost 3031 0
emily-server:
	cargo run --bin emily-server

.PHONY: emily-lambda emily-cdk-synth emily-openapi-spec emily-curl-test emily-server

# Generate the client code using the OpenAPI spec
$(AUTOGENERATED_EMILY_CLIENT): $(EMILY_OPENAPI_SPEC)
	@echo "Building emily client from Openapi Spec"
	pnpm --prefix $(EMILY_OPENAPI_PATH) run build

# Generate the OpenAPI spec for Emily Client
$(EMILY_OPENAPI_SPEC): $(INSTALL_TARGET) $(filter-out $(EMILY_OPENAPI_SPEC), $(wildcard $(subst dir, $(EMILY_OPENAPI_PATH), $(THREE_DIRS_DEEP))))
	cargo build --package emily-openapi-spec

# Blocklist Client API
# ----------------------------------------------------

# Generate the client code using the OpenAPI spec
$(AUTOGENERATED_BLOCKLIST_CLIENT_CLIENT): $(BLOCKLIST_OPENAPI_SPEC)
	pnpm --prefix $(BLOCKLIST_OPENAPI_PATH) run build

# Generate the OpenAPI spec for Blocklist Client
$(BLOCKLIST_OPENAPI_SPEC): $(INSTALL_TARGET) $(filter-out $(BLOCKLIST_OPENAPI_SPEC), $(wildcard $(subst dir, $(BLOCKLIST_OPENAPI_PATH), $(THREE_DIRS_DEEP))))
	cargo build --package blocklist-openapi-gen

devenv-up: $(INSTALL_TARGET) $(EMILY_LAMBDA_BINARY) $(EMILY_CDK_TEMPLATE)
	docker compose -f docker/docker-compose.yml --profile bitcoin-mempool up --detach

devenv-down:
	docker compose -f docker/docker-compose.yml --profile bitcoin-mempool down

run-signer:
	docker compose --file docker-compose.signer.yml down;
	docker compose --file docker-compose.signer.yml up postgres bitcoind --detach;
	POSTGRES_PORT="0"; \
	while [ "$$POSTGRES_PORT" -le 0 ]; do \
		sleep 1; \
		POSTGRES_PORT=$$(docker port sbtc-postgres 5432 | awk -F: '{print $$2}'); \
	done; \
	echo $$POSTGRES_PORT; \
	RUST_LOG=info SIGNER_SIGNER__DB_ENDPOINT="postgres://devenv:devenv@localhost:$$POSTGRES_PORT/signer" cargo run --bin signer -- -c ./signer/src/config/default.toml --migrate-db
